datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

model User {
    id              String  @id @default(cuid())
    username        String  @unique
    nickname        String
    email           String  @unique
    profilePhotoUrl String?
    password        String
    about           String?
    contact         String?

    stripeAccountId String? @unique

    admin      Boolean   @default(false)
    banned     Boolean   @default(false)
    banTimeout DateTime?

    comments Comment[]
    votes    Votes[]   @relation(name: "userVotes")

    series      Series[] @relation(name: "owner")
    posts       Post[]   @relation(name: "author")
    highlight   Post?    @relation(name: "highlight", fields: [highlightId], references: [id])
    highlightId String?

    credits PostCredits[]

    tiers SubscriptionTier[]

    subscriptions Subscription[] @relation(name: "user")

    requestCommissions   Commission[] @relation(name: "user")
    requestedCommissions Commission[] @relation(name: "creator")

    customCss String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sentMessages     ChatMessage[] @relation(name: "sender")
    receivedMessages ChatMessage[] @relation(name: "receiver")

    jobs        Job[]
    candidateAt JobCandidate[]
}

model Series {
    id String @id @default(cuid())

    owner   User   @relation(name: "owner", fields: [ownerId], references: [id])
    ownerId String

    posts Post[]

    name String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum MediaType {
    VIDEO
    IMAGE
}

model Post {
    id        String    @id @default(cuid())
    title     String
    text      String?
    mediaUrl  String
    mediaType MediaType
    thumbUrl  String?

    thumbnailWidth  Int?
    thumbnailHeight Int?

    series   Series? @relation(fields: [seriesId], references: [id])
    seriesId String?

    author   User   @relation(name: "author", fields: [authorId], references: [id])
    authorId String

    highlighted User[] @relation(name: "highlight")

    credits PostCredits[]

    comments Comment[]
    votes    Votes[]   @relation(name: "postVotes")

    minTier   SubscriptionTier? @relation(fields: [minTierId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    minTierId String?

    nsfw Boolean @default(false)

    tags String[] @default([])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Comment {
    id   String @id @default(cuid())
    text String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    userId String

    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    postId String @unique

    parent   Comment?  @relation(name: "chain", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    parentId String?
    children Comment[] @relation(name: "chain")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PostCredits {
    post   Post   @relation(fields: [postId], references: [id])
    postId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    description String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([postId, userId])
}

model Votes {
    id String @id @default(cuid())

    vote Int @db.SmallInt

    user   User   @relation(name: "userVotes", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    userId String

    post   Post   @relation(name: "postVotes", fields: [postId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    postId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, postId])
}

model SubscriptionTier {
    id String @id @default(cuid())

    name String

    creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    creatorId String

    price       Decimal
    subscribers Subscription[]
    Post        Post[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, creatorId, price])
}

model Subscription {
    id String @id @default(cuid())

    tier   SubscriptionTier? @relation(fields: [tierId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    tierId String?

    user   User   @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Commission {
    id String @id @default(cuid())

    title   String
    details String

    creator   User   @relation(name: "creator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    creatorId String

    user   User   @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    userId String

    price Decimal

    confirmed Boolean @default(false)
    completed Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ChatMessage {
    id String @id @default(cuid())

    content String

    seen   Boolean @default(false)
    edited Boolean @default(false)

    sender   User   @relation(name: "sender", fields: [senderId], references: [id])
    senderId String

    receiver   User   @relation(name: "receiver", fields: [receiverId], references: [id])
    receiverId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Job {
    id String @id @default(cuid())

    description String

    owner   User   @relation(fields: [ownerId], references: [id])
    ownerId String

    candidates JobCandidate[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model JobCandidate {
    job   Job    @relation(fields: [jobId], references: [id])
    jobId String

    candidate   User   @relation(fields: [candidateId], references: [id])
    candidateId String

    description String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([jobId, candidateId])
}
